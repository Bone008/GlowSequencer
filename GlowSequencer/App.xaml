<Application x:Class="GlowSequencer.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vm="clr-namespace:GlowSequencer.ViewModel"
             xmlns:model="clr-namespace:GlowSequencer.Model"
             xmlns:util="clr-namespace:GlowSequencer.Util"
             xmlns:view="clr-namespace:GlowSequencer.View"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             StartupUri="View/MainWindow.xaml"
             Startup="Application_Startup">
    <Application.Resources>
        <vm:MainViewModel x:Key="vm_Main" />
        <vm:GlobalViewParameters x:Key="vm_Global" CurrentColorMode="ColorCanvas" />

        <util:ColorToBrushValueConverter x:Key="conv_ColorToBrush" />
        <util:NullToVisiblityConverter x:Key="conv_NullToVisibility" />
        <util:NullToBoolConverter x:Key="conv_NullToBool" />
        <util:BoolToVisibilityConverter x:Key="conv_BoolToVisibility" />
        <util:TimeSpanToStringConverter x:Key="conv_TimeSpanToString" />
        <util:InvertedValueConverter x:Key="conv_Invert" />
        <util:MoreVibrantColorConverter x:Key="conv_MoreVibrantColor" />

        <Thickness x:Key="thickness_VerticalScrollBarRight" Right="{StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>

        <!-- Global style for color pickers -->
        <Style TargetType="xctk:ColorPicker">
            <Setter Property="UsingAlphaChannel" Value="False"/>
            <Setter Property="ShowAvailableColors" Value="False"/>
            <!--<Setter Property="ShowRecentColors" Value="False"/>-->
            <Setter Property="ColorMode" Value="{Binding Source={StaticResource vm_Global}, Mode=TwoWay, Path=CurrentColorMode}"/>
        </Style>

        <!-- Global style for text boxes -->
        <Style TargetType="TextBox">
            <Setter Property="util:TextFieldBehavior.BindOnEnter" Value="True"/>
            <Setter Property="util:TextFieldBehavior.SelectOnFocus" Value="True"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>

        <Style TargetType="ContextMenu">
            <EventSetter Event="ContextMenuOpening" Handler="AnyContextMenu_Opening" />
        </Style>

        <Style x:Key="s_FormLabel" TargetType="Label">
            <Setter Property="Width" Value="120"/>
            <Setter Property="HorizontalContentAlignment" Value="Right"/>
            <Setter Property="Padding" Value="10,5"/>
        </Style>

        <Style x:Key="s_FormLabelWide" TargetType="Label" BasedOn="{StaticResource s_FormLabel}">
            <Setter Property="Width" Value="180"/>
        </Style>

        <Style x:Key="s_FormLabelNarrow" TargetType="Label" BasedOn="{StaticResource s_FormLabel}">
            <Setter Property="Width" Value="100"/>
        </Style>

        <Style x:Key="s_FormRow" TargetType="StackPanel">
            <Setter Property="Orientation" Value="Horizontal" />
            <Setter Property="Margin" Value="0,2" />
        </Style>


        <Style x:Key="s_TimelineTrackRow" TargetType="{x:Type Border}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsSelected}" Value="True">
                    <Setter Property="Background" Value="#33999999" />
                </DataTrigger>
                <DataTrigger Binding="{Binding IsSelected}" Value="False">
                    <Setter Property="Background" Value="Transparent" />
                </DataTrigger>
            </Style.Triggers>
        </Style>


        <Style x:Key="s_TimelineBlockContainerContent" TargetType="{x:Type ContentPresenter}">
            <Setter Property="Canvas.Left" Value="{Binding DisplayOffset}"/>
            <Setter Property="Canvas.Top" Value="{Binding DisplayTopOffset}"/>
            <Setter Property="Width" Value="{Binding DisplayWidth}"/>
            <Setter Property="Height" Value="{Binding DisplayHeight}"/>
            <Setter Property="Clip" Value="{Binding DisplayClip}" />
        </Style>

        <Style x:Key="s_TimelineBlockContainer" TargetType="ItemsControl">
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <Canvas />
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemContainerStyle" Value="{StaticResource s_TimelineBlockContainerContent}" />

            <Style.Resources>
                <Style x:Key="s_TimelineBlock" TargetType="FrameworkElement">
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Source={StaticResource vm_Main}, Path=CurrentDocument.FadeAwayOtherBlocks}" Value="True"/>
                                <Condition Binding="{Binding IsSegmentActive}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" Value="0.5" />
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>

                <Style x:Key="s_TimelineBorderedBlock" TargetType="Border" BasedOn="{StaticResource s_TimelineBlock}">
                    <Setter Property="Margin" Value="0,3"/>
                    <!--<Setter Property="HorizontalAlignment" Value="Left"/>
                    <Setter Property="Width" Value="{Binding DisplayWidth}"/>
                    <Setter Property="RenderTransform">
                        <Setter.Value>
                            <TransformGroup>
                                <TranslateTransform X="{Binding DisplayOffset}"/>
                            </TransformGroup>
                        </Setter.Value>
                    </Setter>-->

                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsSelected}" Value="True">
                            <Setter Property="BorderBrush" Value="Black" />
                            <Setter Property="BorderThickness" Value="3" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsSelected}" Value="False">
                            <Setter Property="BorderBrush" Value="Gray" />
                            <Setter Property="BorderThickness" Value="1" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>

                <DataTemplate DataType="{x:Type vm:ColorBlockViewModel}">
                    <!--<Border Style="{StaticResource s_TimelineBorderedBlock}" Background="{Binding RenderedColor, Converter={StaticResource conv_ColorToBrush}}" />-->
                    <Border Style="{StaticResource s_TimelineBorderedBlock}">
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5" ColorInterpolationMode="SRgbLinearInterpolation">
                                <GradientStop Color="{Binding RenderedColor1, Converter={StaticResource conv_MoreVibrantColor}}" Offset="0"/>
                                <GradientStop Color="{Binding RenderedColor2, Converter={StaticResource conv_MoreVibrantColor}}" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>
                    </Border>
                </DataTemplate>

                <DataTemplate DataType="{x:Type vm:RampBlockViewModel}">
                    <Border Style="{StaticResource s_TimelineBorderedBlock}">
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5" ColorInterpolationMode="SRgbLinearInterpolation">
                                <GradientStop Color="{Binding StartColor, Converter={StaticResource conv_MoreVibrantColor}}" Offset="0"/>
                                <GradientStop Color="{Binding EndColor, Converter={StaticResource conv_MoreVibrantColor}}" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>
                    </Border>
                </DataTemplate>

                <DataTemplate DataType="{x:Type vm:GroupBlockViewModel}">
                    <Grid Style="{StaticResource s_TimelineBlock}">
                        <!-- dynamic resource because otherwise it leads to a infinitely nesting loop -->
                        <ItemsControl ItemsSource="{Binding Children}" Style="{DynamicResource s_TimelineBlockContainer}">
                            <ItemsControl.RenderTransform>
                                <TranslateTransform Y="{Binding DisplayTopOffset, Converter={StaticResource conv_Invert}}"/>
                            </ItemsControl.RenderTransform>
                        </ItemsControl>
                        <Rectangle Margin="-3,0" Fill="Transparent">
                            <Rectangle.Style>
                                <Style TargetType="Rectangle">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                            <Setter Property="Stroke" Value="#FF333355" />
                                            <Setter Property="StrokeThickness" Value="3" />
                                            <Setter Property="StrokeDashArray" Value="3 2" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsSelected}" Value="False">
                                            <Setter Property="Stroke" Value="Gray" />
                                            <Setter Property="StrokeThickness" Value="1" />
                                            <Setter Property="StrokeDashArray" Value="9 6" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                        </Rectangle>
                    </Grid>
                </DataTemplate>

                <DataTemplate DataType="{x:Type vm:LoopBlockViewModel}">
                    <Canvas x:Name="containerCanvas" Style="{StaticResource s_TimelineBlock}" ClipToBounds="False">
                        <ItemsControl ItemsSource="{Binding ChildrenRepetitions}" Height="{Binding ElementName=containerCanvas, Path=ActualHeight}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.RenderTransform>
                                <TranslateTransform Y="{Binding DisplayTopOffset, Converter={StaticResource conv_Invert}}"/>
                            </ItemsControl.RenderTransform>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <ItemsControl
                                        Width="{Binding DataContext.DisplayWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}}"
                                        ItemsSource="{Binding}"
                                        Style="{DynamicResource s_TimelineBlockContainer}">
                                    </ItemsControl>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                        <Border Width="{Binding ElementName=containerCanvas, Path=ActualWidth}" Height="{Binding ElementName=containerCanvas, Path=ActualHeight}">
                            <Rectangle Margin="-3,0" Fill="Transparent">
                                <Rectangle.Style>
                                    <Style TargetType="Rectangle">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                                <Setter Property="Stroke" Value="#FF333355" />
                                                <Setter Property="StrokeThickness" Value="3" />
                                                <Setter Property="StrokeDashArray" Value="3 2" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding IsSelected}" Value="False">
                                                <Setter Property="Stroke" Value="Gray" />
                                                <Setter Property="StrokeThickness" Value="1" />
                                                <Setter Property="StrokeDashArray" Value="9 6" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Rectangle.Style>
                            </Rectangle>
                        </Border>
                    </Canvas>
                </DataTemplate>
            </Style.Resources>
        </Style>


        <DataTemplate x:Key="MusicSegmentLabel" DataType="{x:Type vm:MusicSegmentViewModel}">
            <TextBlock Text="{Binding Label}" />
        </DataTemplate>


        <ContextMenu x:Key="contextMenu_ReplaceThisColor">
            <!--<MenuItem Command="ApplicationCommands.Copy" Header="_Copy color" />
            <MenuItem Command="ApplicationCommands.Paste" Header="_Paste color" />
            <Separator />-->
            <MenuItem Command="view:SequencerCommands.ReplaceColor" Header="_Replace color in entire sequence ..."
                      CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedColor}" />
        </ContextMenu>

        <!-- Note: This has to have a key because the datatype is recursively used in a ContentPresenter in this template. -->
        <DataTemplate x:Key="GenericProperties" DataType="{x:Type vm:SelectionProperties}">
            <DataTemplate.Resources>
                <DataTemplate x:Key="PropertiesColor">
                    <StackPanel Orientation="Vertical">
                        <StackPanel Orientation="Horizontal">
                            <Label Content="Color:" Style="{StaticResource s_FormLabelNarrow}"/>
                            <xctk:ColorPicker SelectedColor="{Binding Color}" Width="120" VerticalAlignment="Center" ContextMenu="{StaticResource contextMenu_ReplaceThisColor}" />
                            <view:PipetteButton
                                TargetColor="{Binding Color}"
                                ActivationContext="{Binding Source={StaticResource vm_Main}, Path=CurrentDocument.PipetteTarget}">
                            </view:PipetteButton>
                        </StackPanel>
                    </StackPanel>
                </DataTemplate>

                <DataTemplate x:Key="PropertiesRamp">
                    <StackPanel Orientation="Vertical">
                        <StackPanel Style="{StaticResource s_FormRow}">
                            <Label Content="Start color:" Style="{StaticResource s_FormLabelNarrow}"/>
                            <xctk:ColorPicker SelectedColor="{Binding StartColor}" Width="120" VerticalAlignment="Center" ContextMenu="{StaticResource contextMenu_ReplaceThisColor}" />
                            <view:PipetteButton
                                TargetColor="{Binding StartColor}"
                                ActivationContext="{Binding Source={StaticResource vm_Main}, Path=CurrentDocument.PipetteTarget}">
                            </view:PipetteButton>
                        </StackPanel>
                        <StackPanel Style="{StaticResource s_FormRow}">
                            <Label Content="End color:" Style="{StaticResource s_FormLabelNarrow}"/>
                            <xctk:ColorPicker SelectedColor="{Binding EndColor}" Width="120" VerticalAlignment="Center" ContextMenu="{StaticResource contextMenu_ReplaceThisColor}" />
                            <view:PipetteButton
                                TargetColor="{Binding EndColor}"
                                ActivationContext="{Binding Source={StaticResource vm_Main}, Path=CurrentDocument.PipetteTarget}">
                            </view:PipetteButton>
                        </StackPanel>
                        <StackPanel Style="{StaticResource s_FormRow}">
                            <Label Content="" Style="{StaticResource s_FormLabelNarrow}"/>
                            <Button Content="Swap" Width="60" Command="view:SequencerCommands.SwapRampColors" CommandParameter="{Binding}" />
                        </StackPanel>
                    </StackPanel>
                </DataTemplate>

                <DataTemplate x:Key="PropertiesLoop">
                    <StackPanel Orientation="Vertical">
                        <StackPanel Style="{StaticResource s_FormRow}">
                            <Label Content="Repetitions:" Style="{StaticResource s_FormLabelNarrow}"/>
                            <TextBox Width="50" HorizontalContentAlignment="Right" Text="{Binding Repetitions, TargetNullValue='?'}" />
                        </StackPanel>
                    </StackPanel>
                </DataTemplate>
            </DataTemplate.Resources>


            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="35"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <Label FontWeight="Bold" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="5">
                    <TextBlock Text="{Binding TypeLabel, StringFormat='\{0} block properties'}" />
                </Label>
                <StackPanel Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="5">
                    <Label Content="Music segment:" Style="{StaticResource s_FormLabelNarrow}"/>
                    <ComboBox Width="250"
                              ItemsSource="{Binding CurrentDocument.MusicSegments, Source={StaticResource vm_Main}}" ItemTemplate="{StaticResource MusicSegmentLabel}"
                              SelectedItem="{Binding SegmentContext}"
                              IsEnabled="{Binding IsMusicSegmentModifiable}" />
                    <Button Content="Manage" Command="view:SequencerCommands.MusicManageSegments" Width="60" Margin="5,0,0,0"/>
                </StackPanel>

                <ScrollViewer Name="scroller" Grid.Row="1" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled">
                    <WrapPanel Orientation="Vertical" Height="{Binding ElementName=scroller, Path=ViewportHeight}">
                        <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                            <StackPanel Orientation="Vertical">
                                <Label Content="Tracks:" Style="{StaticResource s_FormLabelNarrow}"/>
                                <Button Content="All" Command="view:SequencerCommands.TrackAffiliationAll" CommandParameter="{Binding}" Width="40" HorizontalAlignment="Right" Margin="10,0" />
                                <Button Content="Invert" Command="view:SequencerCommands.TrackAffiliationInvert" CommandParameter="{Binding}" Width="40" HorizontalAlignment="Right" Margin="10,5" />
                            </StackPanel>
                            <ItemsControl ItemsSource="{Binding TrackAffiliation}" Padding="0,5">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <WrapPanel Orientation="Vertical"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <CheckBox IsChecked="{Binding AffiliationState}" IsEnabled="{Binding CanModify}"  Content="{Binding Track.Label}" Margin="0,0,5,0"
                                                  MouseEnter="GenericPropertiesTrackCheckBox_MouseEnter"
                                                  GotMouseCapture="GenericPropertiesTrackCheckBox_GotMouseCapture" />
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </StackPanel>

                        <StackPanel Orientation="Vertical" Margin="0,0,0,5">
                            <StackPanel Style="{StaticResource s_FormRow}">
                                <Label Content="Start time:" Style="{StaticResource s_FormLabelNarrow}"/>
                                <view:TimeUnitEditControl x:Name="editStartTime" Value="{Binding StartTimeComplex}" ActiveUnit="0"/>
                            </StackPanel>
                            <StackPanel Style="{StaticResource s_FormRow}">
                                <Label Content="End time:" Style="{StaticResource s_FormLabelNarrow}"/>
                                <view:TimeUnitEditControl Value="{Binding EndTimeComplex}" ActiveUnit="{Binding ElementName=editStartTime, Path=ActiveUnit, Mode=TwoWay}"/>
                            </StackPanel>
                            <StackPanel Style="{StaticResource s_FormRow}">
                                <Label Content="Duration:" Style="{StaticResource s_FormLabelNarrow}"/>
                                <view:TimeUnitEditControl Value="{Binding DurationComplex}" ActiveUnit="{Binding ElementName=editStartTime, Path=ActiveUnit, Mode=TwoWay}"/>
                            </StackPanel>

                            <StackPanel Style="{StaticResource s_FormRow}">
                                <Label Content="" Style="{StaticResource s_FormLabelNarrow}"/>
                                <CheckBox Content="Synchronize units" Margin="85,0,0,0" VerticalAlignment="Center" IsChecked="True" IsEnabled="False"/>
                            </StackPanel>
                        </StackPanel>

                        <ContentPresenter Content="{Binding}">
                            <ContentPresenter.Resources>
                                <Style TargetType="ContentPresenter">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding TypeLabel}" Value="Color">
                                            <Setter Property="ContentTemplate" Value="{StaticResource PropertiesColor}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding TypeLabel}" Value="Ramp">
                                            <Setter Property="ContentTemplate" Value="{StaticResource PropertiesRamp}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding TypeLabel}" Value="Loop">
                                            <Setter Property="ContentTemplate" Value="{StaticResource PropertiesLoop}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding TypeLabel}" Value="Mixed">
                                            <Setter Property="Visibility" Value="Hidden" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </WrapPanel>
                </ScrollViewer>
            </Grid>
        </DataTemplate>


        <ControlTemplate x:Key="ContentOnlyTemplate" TargetType="Button">
            <ContentPresenter/>
        </ControlTemplate>


        <!-- Style for buttons with an icon as their primary content. -->
        <Style TargetType="ButtonBase" x:Key="s_IconButton">
            <Setter Property="Height" Value="30" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />

            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.5" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Styles for specific icon buttons. -->
        <Image x:Key="image_icon_cut" x:Shared="False" Source="Resources/icon_cut.png" />
        <Image x:Key="image_icon_lock" x:Shared="False" Source="Resources/icon_lock.png" />
        <Image x:Key="image_icon_lock_open" x:Shared="False" Source="Resources/icon_lock_open.png" />
        <Image x:Key="image_icon_pause" x:Shared="False" Source="Resources/icon_pause.png" />
        <Image x:Key="image_icon_play" x:Shared="False" Source="Resources/icon_play.png" />
        <Image x:Key="image_icon_zoom_in" x:Shared="False" Source="Resources/icon_zoom_in.png" />
        <Image x:Key="image_icon_zoom_out" x:Shared="False" Source="Resources/icon_zoom_out.png" />
        <Image x:Key="image_icon_pipette" x:Shared="False" Source="Resources/icon_pipette.png" />

        <Style TargetType="ButtonBase" x:Key="s_IconButtonCut" BasedOn="{StaticResource s_IconButton}">
            <Setter Property="ToolTip" Value="Cut blocks at cursor (C)" />
            <Setter Property="Content" Value="{StaticResource image_icon_cut}" />
        </Style>
        <Style TargetType="ButtonBase" x:Key="s_IconButtonLock" BasedOn="{StaticResource s_IconButton}">
            <Setter Property="ToolTip" Value="Lock" />
            <!-- defining the image inline here does not work for multiple buttons, so we use an unshared reference, see: http://stackoverflow.com/a/6356936 -->
            <Setter Property="Content" Value="{StaticResource image_icon_lock}" />
        </Style>
        <Style TargetType="ButtonBase" x:Key="s_IconButtonLockOpen" BasedOn="{StaticResource s_IconButton}">
            <Setter Property="ToolTip" Value="Unlock" />
            <Setter Property="Content" Value="{StaticResource image_icon_lock_open}" />
        </Style>
        <Style TargetType="ButtonBase" x:Key="s_IconButtonPause" BasedOn="{StaticResource s_IconButton}">
            <Setter Property="ToolTip" Value="Pause (Space)" />
            <Setter Property="Content" Value="{StaticResource image_icon_pause}" />
        </Style>
        <Style TargetType="ButtonBase" x:Key="s_IconButtonPlay" BasedOn="{StaticResource s_IconButton}">
            <Setter Property="ToolTip" Value="Play (Space)" />
            <Setter Property="Content" Value="{StaticResource image_icon_play}" />
        </Style>
        <Style TargetType="ButtonBase" x:Key="s_IconButtonZoomIn" BasedOn="{StaticResource s_IconButton}">
            <Setter Property="ToolTip" Value="Zoom in (Ctrl +)" />
            <Setter Property="Content" Value="{StaticResource image_icon_zoom_in}" />
        </Style>
        <Style TargetType="ButtonBase" x:Key="s_IconButtonZoomOut" BasedOn="{StaticResource s_IconButton}">
            <Setter Property="ToolTip" Value="Zoom out (Ctrl -)" />
            <Setter Property="Content" Value="{StaticResource image_icon_zoom_out}" />
        </Style>
        <Style TargetType="ButtonBase" x:Key="s_IconButtonPipette" BasedOn="{StaticResource s_IconButton}">
            <Setter Property="Height" Value="22" />
            <Setter Property="ToolTip" Value="Pick color" />
            <Setter Property="Content" Value="{StaticResource image_icon_pipette}" />
        </Style>

    </Application.Resources>
</Application>
