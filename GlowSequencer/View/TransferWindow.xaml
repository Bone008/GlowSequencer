<Window x:Class="GlowSequencer.View.TransferWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="clr-namespace:GlowSequencer.ViewModel"
        Title="Transfer to equipment" Width="620" SizeToContent="Height"
        Closing="Window_Closing" Activated="Window_Activated" SizeChanged="Window_SizeChanged"
        Icon="/GlowSequencer;component/Resources/icon.ico" WindowStartupLocation="CenterOwner">

    <ScrollViewer VerticalScrollBarVisibility="Auto">
        <StackPanel Orientation="Vertical" Margin="10">
            <StackPanel IsEnabled="{Binding IsTransferIdle}">
                <DockPanel Margin="0,5">
                    <Label DockPanel.Dock="Left" Style="{StaticResource s_FormLabelWide}">Aerotech Glo-Ultimate App:</Label>
                    <TextBlock DockPanel.Dock="Bottom" TextWrapping="Wrap" Margin="0,10">
                        Please enter the full path of <Run FontWeight="Bold">glo_ultimate_app.exe</Run> on your computer.
                        <LineBreak />
                        The necessary *.glo files will be automatically generated into a subdirectory of the Aerotech program.
                        <LineBreak />
                        Please make sure that you have write access to the directory.
                    </TextBlock>
                    <Button TabIndex="1" DockPanel.Dock="Right" Content="Browse ..." Padding="10,0" Margin="10,0,0,0" Click="BrowseButton_Click" />
                    <TextBox TabIndex="0" Text="{Binding AerotechAppExePath, UpdateSourceTrigger=PropertyChanged}" />
                </DockPanel>

                <DockPanel Margin="0,5">
                    <Label DockPanel.Dock="Left" Style="{StaticResource s_FormLabelWide}">Tracks to transfer:</Label>
                    <StackPanel DockPanel.Dock="Right" Orientation="Vertical" HorizontalAlignment="Right" Margin="10,0,0,0">
                        <Button Click="SelectAll_Click" Width="60">All</Button>
                        <Button Click="SelectNone_Click" Width="60" Margin="0,5,0,0">None</Button>
                    </StackPanel>
                    <ListBox Name="transferredTracks" SelectionMode="Extended"
                             MaxHeight="150"
                             ItemsSource="{Binding AllTracks}"
                             SelectionChanged="transferredTracks_SelectionChanged">
                        <ListBox.ItemTemplate>
                            <DataTemplate DataType="{x:Type vm:TrackViewModel}">
                                <CheckBox Content="{Binding Label}" IsChecked="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}, Path=IsSelected}" />
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </DockPanel>

                <StackPanel Style="{StaticResource s_FormRow}" Orientation="Horizontal">
                    <Label Style="{StaticResource s_FormLabelWide}">Start time:</Label>
                    <TextBox Width="150" Text="{Binding ExportStartTime, Converter={StaticResource conv_TimeSpanToString}}" />
                    <Button Width="50" Margin="10,0" Click="CursorButton_Click">Cursor</Button>
                    <Button Width="50" Click="ZeroButton_Click">Zero</Button>
                </StackPanel>

                <StackPanel Style="{StaticResource s_FormRow}" Margin="0,5">
                    <Label Style="{StaticResource s_FormLabelWide}" Content="After successful transfer:" />
                    <StackPanel Orientation="Vertical">
                        <RadioButton Margin="0,3" GroupName="postaction" IsChecked="True">Do nothing.</RadioButton>
                        <RadioButton Margin="0,3" GroupName="postaction" IsChecked="{Binding CloseProgramAfterTransfer}">Close Glo-Ultimate App.</RadioButton>
                        <RadioButton Margin="0,3" GroupName="postaction" IsChecked="{Binding StartAutomagicallyAfterTransfer}"
                                     Checked="StartAutomagically_CheckedChanged"  Unchecked="StartAutomagically_CheckedChanged">Start sequence automatically.</RadioButton>
                    </StackPanel>
                </StackPanel>

                <StackPanel Style="{StaticResource s_FormRow}" Margin="0,5" Visibility="{Binding StartAutomagicallyAfterTransfer, Converter={StaticResource conv_BoolToVisibility}}">
                    <Label Style="{StaticResource s_FormLabelWide}" Content="Music:" />
                    <StackPanel Orientation="Vertical">
                        <RadioButton GroupName="musicaction" Margin="0,3" Content="Do not start music." Name="noStartMusicCb"
                                     IsChecked="True" />
                        <RadioButton GroupName="musicaction" Margin="0,3"
                                     IsChecked="{Binding StartInternalMusicAfterTransfer}">
                            <TextBlock>Start internal music at <Run Text="{Binding ExportStartTime, Converter={StaticResource conv_TimeSpanToString}}"/>.</TextBlock>
                        </RadioButton>
                        <RadioButton GroupName="musicaction" Margin="0,3" Content="Start external music."
                                     IsChecked="{Binding StartExternalMusicAfterTransfer}" />
                    </StackPanel>
                </StackPanel>

                <DockPanel Margin="0,5" Visibility="{Binding StartExternalMusicAfterTransfer, Converter={StaticResource conv_BoolToVisibility}}">
                    <Label DockPanel.Dock="Left" Style="{StaticResource s_FormLabelWide}">External music program:</Label>
                    <TextBlock DockPanel.Dock="Bottom" Margin="0,5,0,0" TextWrapping="Wrap">
                        In the external program, the spacebar will be pressed at the same time as the sequence is started.
                    </TextBlock>
                    <Button DockPanel.Dock="Right" Padding="10,0" Margin="10,0,0,0" Click="RefreshList_Click">Refresh list</Button>
                    <ComboBox ItemsSource="{Binding ProcessesWithWindows}" SelectedValue="{Binding MusicWindowProcessId}" SelectedValuePath="Id">
                        <ComboBox.ItemContainerStyle>
                            <Style TargetType="{x:Type ComboBoxItem}">
                                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            </Style>
                        </ComboBox.ItemContainerStyle>
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock>
                                    <Run Text="{Binding MainWindowTitle, Mode=OneWay}" />
                                    <Run>   </Run>
                                    <Run Text="{Binding ProcessName, Mode=OneWay}" Foreground="DarkGray" />
                                </TextBlock>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </DockPanel>

                <Expander Header="Advanced settings" Margin="0,10" BorderBrush="#FFABADB3" BorderThickness="1" Padding="5">
                    <Grid>
                        <StackPanel Orientation="Vertical">
                            <StackPanel Style="{StaticResource s_FormRow}" ToolTip="How long to wait for Glo-Ultimate to recognize all clubs after startup.">
                                <Label Style="{StaticResource s_FormLabelWide}" Content="Delay after program start:" />
                                <TextBox Text="{Binding DelayBeforeStart}" Width="50" HorizontalContentAlignment="Right" />
                                <Label Content="ms"/>
                            </StackPanel>
                            <StackPanel Style="{StaticResource s_FormRow}" ToolTip="How long to wait for an upload to complete before continuing.">
                                <Label Style="{StaticResource s_FormLabelWide}" Content="Delay for uploads:" />
                                <TextBox Text="{Binding DelayForUpload}" Width="50" HorizontalContentAlignment="Right" />
                                <Label Content="ms"/>
                            </StackPanel>
                            <StackPanel Style="{StaticResource s_FormRow}" ToolTip="How long to wait between each simulated key press.">
                                <Label Style="{StaticResource s_FormLabelWide}" Content="Delay between key presses:" />
                                <TextBox Text="{Binding DelayBetweenKeys}" Width="50" HorizontalContentAlignment="Right" />
                                <Label Content="ms"/>
                            </StackPanel>
                        </StackPanel>

                        <Button Content="Reset" ToolTip="Reset advanced settings to default values."
                                HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="5" Padding="15,1"
                                Click="ResetAdvanced_Click" />
                    </Grid>
                </Expander>
            </StackPanel>

            <StackPanel Orientation="Vertical">
                <TextBlock TextWrapping="Wrap" HorizontalAlignment="Right" TextAlignment="Right">
                    <Run>All equipment has to be connected to the computer before starting the transfer.</Run>
                    <LineBreak />
                    <Run>Please do not press any buttons while the Aerotech software is running.</Run>
                </TextBlock>


                <Button Width="100" Height="30" HorizontalAlignment="Right" Margin="0,10"
                        Content="Cancel" Click="Cancel_Click"
                        Visibility="{Binding IsTransferInProgress, Converter={StaticResource conv_BoolToVisibility}}" />
                <Button Width="100" Height="30" HorizontalAlignment="Right" Margin="0,10"
                        Content="Start" Click="Start_Click"
                        Visibility="{Binding IsTransferIdle, Converter={StaticResource conv_BoolToVisibility}}"
                        IsEnabled="{Binding CanStartTransfer}"
                        ToolTip="{Binding CanStartTransferReason}" ToolTipService.ShowOnDisabled="True" />

                <ProgressBar Height="25" Value="{Binding TransferProgress}" Maximum="100" />

                <Label>Log:</Label>
                <TextBox IsReadOnly="True" Height="100" Text="{Binding LogOutput, Mode=OneWay}" VerticalContentAlignment="Top"
                     TextWrapping="Wrap" VerticalScrollBarVisibility="Visible" TextChanged="TextBox_TextChanged" />
            </StackPanel>

        </StackPanel>
    </ScrollViewer>
</Window>
