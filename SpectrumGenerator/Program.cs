using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SpectrumGenerator
{
    class Program
    {
        static void Main(string[] args)
        {
            const int delayPerColor = 50;

            const int numValues = 5;
            const int numSaturation = 5;
            const int numHues = 30;


            var combinations = from sat in Enumerable.Range(1, numSaturation).Select(i => i * 1.0 / numSaturation)
                               from hue in Enumerable.Range(0, numHues).Select(i => i * 360.0 / numHues)
                               from value in Enumerable.Range(1, numValues).Select(i => i * 1.0 / numValues)
                               select Tuple.Create(sat, hue, value);


            if (args.Length < 1)
            {
                combinations.ToList().ForEach(c => Console.Write(c.Item1 + "|" + c.Item2 + "|" + c.Item3 + "\t"));

                Console.WriteLine();
                Console.WriteLine();

                var result2 = from tpl in combinations
                              let sat = tpl.Item1
                              let hue = tpl.Item2
                              let value = tpl.Item3
                              select ColorUtil.ColorFromHSV(hue, sat, value);

                result2.Select(c => c.ToArgb().ToString("x").Substring(2)).ToList().ForEach(c => Console.Write(c + "\t"));

                Console.ReadKey(true);

                Console.WriteLine();

                combinations.ToList().ForEach(c => { Console.Write("                               \r"); Console.Write(c.Item1 + "|" + c.Item2 + "|" + c.Item3 + "\r"); System.Threading.Thread.Sleep(50); });
            }
            else if(args[0] == "program")
            {
                Console.WriteLine("; Generated by Spectrum Generator at " + DateTime.Now.ToString());
                foreach (var c in combinations)
                {
                    System.Drawing.Color col = ColorUtil.ColorFromHSV(c.Item2, c.Item1, c.Item3);
                    Console.WriteLine("C, {0}, {1}, {2}", col.R, col.G, col.B);
                    Console.WriteLine("D, {0}", delayPerColor);
                }
                Console.WriteLine("END");
            }
            else  if(args[0] == "compare" && args.Length >= 2)
            {
                IEnumerable<System.Drawing.Color> measuredColors = File.ReadLines(args[1]).Select(line => {
                    string[] chunks = line.Split(';');
                    if(chunks.Length != 4)
                        throw new InvalidDataException("line has incorrect format");

                    int[] channels = chunks.Skip(1).Select(str => (int)Math.Round(double.Parse(str))).ToArray();
                    return System.Drawing.Color.FromArgb(channels[0], channels[1], channels[2]);
                });


                foreach(var tuple in Enumerable.Zip(combinations, measuredColors, Tuple.Create)/*.OrderBy(tpl => tpl.Item1.Item2)*/)
                {
                    double inSat = tuple.Item1.Item1;
                    double inHue = tuple.Item1.Item2;
                    double inValue = tuple.Item1.Item3;

                    double outHue, outSat, outValue;
                    ColorUtil.ColorToHSV(tuple.Item2, out outHue, out outSat, out outValue);

                    Console.WriteLine("{0:0.00} --> {1:0.00}", ColorUtil.ColorFromHSV(inHue, inSat, inValue), tuple.Item2);
                }
            }
            else
            {
                Console.WriteLine("Invalid usage!");
            }
        }
    }
}
